[
  {
    "title": "HTML and CSS",
    "slug": "html-css",
    "content": "",
    "sectionType": "module",
    "sequence": 1,
    "parentSection": null
  },
  {
    "title": "Introduction",
    "slug": "introduction-html-css",
    "content": "<h1 id=\"welcometowebdevelopent101seriesbypopulardemand\">Welcome to the Website Development Series by Popular Demand</h1>\n<p>Congrats! You've taken the first step to learning how to build a website &mdash; <em>showing up</em> with a <em>willing attitude</em>. With those two attributes, you can do pretty much anything you set your mind to, but for now, let's build a web site!</p>\n<h3 id=\"whatstheplan\">What's the plan?</h3>\n<p>Our time together is limited. For that reason, the instruction found here will be focused on the <em>must have knowledge</em>, and you will walk away with a site <em>open to extension</em> to your heart's content. Resources will be provided.</p>\n<p>Soon, you'll start to notice that web programs are a lot like Legos. Every new piece of knowledge you get easily fits onto your existing knowledge base. And the more you add on, the more extensible the program gets!</p>\n<h3 id=\"whatwellbuildtoday\">What we'll build today</h3>\n<p>Today, we will cover some basic building blocks of HTML, CSS, and Git/Github.</p>\n<p>You will walk away with a personal site deployed on the web for all to see.</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/wwcode-webdev/site-preview.png\" alt=\"sample website\" /></p>\n<p class=\"closing\">How exciting! Let's get to it!</p>",
    "sectionType": "chapter",
    "sequence": 0,
    "preview": true,
    "parentSection": {
      "parentSectionType": "module",
      "parentSectionSequence": 1,
      "parentSectionSlug": "html-css"
    }
  },
  {
    "title": "What You'll Need",
    "slug": "what-needed-html-css",
    "content": "<h2 id=\"youwillneed\">You will need</h2>\n<ol>\n<li><strong>A text editor</strong><ul>\n<li>My personal editor of choice is <a href=\"https://www.sublimetext.com/3\">Sublime Text 3</a>. It comes with all of the features needed for modern programming. It is a paid service, but it comes with an <em>unlimited free evaluation period</em>. Thanks, Sublime Text!</li>\n<li><a href=\"https://atom.io/\">Atom</a> text editor is beloved by many, many people. It is fully open source and has many (or more) of the same features of Sublime Text.</li>\n<li>There are many more to choose from, but I recommend one of the above two. <strong>It doesn't matter what editor you pick. What matters is the code you write.</strong></li></ul></li>\n</ol>\n<p>The text editor is the tool where you will be writing your code and markup.</p>\n<ol start=\"2\">\n<li><strong>A Web Browser</strong><ul>\n<li>Use <a href=\"https://www.google.com/chrome/browser/desktop\">Google Chrome</a>.</li>\n<li>If you refuse to use Chrome, use <a href=\"https://www.mozilla.org/en-US/firefox/new\">Mozilla Firefox</a>.</li>\n<li>Go ahead with Safari if you're a rebel without a cause.</li></ul></li>\n</ol>\n<p>The browser is the tool that reads and interprets the HTML and CSS you and others write. Just as French is spoken in France, Japaneses is spoken in Japan, and Antarctican is spoken in Antarctica, <strong>HTML and CSS are the languages spoken in Browserland</strong>. And you're about to become fluent in telling the browser what to do.</p>\n<p>Different browsers offer different levels of support for the code and markup you may write. You  will eventually want to get to a point where your code looks great on any browser that opens it, but to begin with, make it look great on one browser.</p>\n<p>For the record, the above three browsers work as well as another for 97% of the work you'll do in the beginning.</p>\n<p>If you are truly interested, check out <a href=\"http://caniuse.com\">caniuse</a> to see a visualization of the current state of browser feature support.</p>\n<p class=\"closing\">Let's move on</p>",
    "sectionType": "chapter",
    "sequence": 1,
    "parentSection": {
      "parentSectionType": "module",
      "parentSectionSequence": 1,
      "parentSectionSlug": "html-css"
    }
  },
  {
    "title": "Getting Started with HTML",
    "slug": "start-html",
    "content": "<h2 id=\"gettingstartedwithhtml\">Getting Started with HTML</h2>\n<p>Before learning the ins and outs of HTML, consider how everyday documents are formatted. You can think of a recenta blog post or newspaper article you've read.</p>\n<p>Think of how the structure of the writing was presented &mdash; there was probably one large heading at the top followed by some smaller, more detailed text. Every few paragraphs, there may have been a smaller heading to signify an important shift in topic. Depending on the format, the article may have been accented by images and media.</p>\n<p>Squint at this image to visualize the affect of visual hierarchy:</p>\n<p><img src=\"http://www.archives.com/genealogy/images/Pearl%20Harbor%20Records.png\" alt=\"old timey newspaper frontpage\" /></p>\n<p>Imagine now that you were going to type this up in your favorite word processor. As you get to various new headings and topics, you will probably click some button to make the font bold, and increase the font in a select dropdown, or some workflow like that. This type of workflow works great <em>when you're a human</em> with <em>hands</em> and <em>eyes</em> and/or <em>ingenuity</em>.</p>\n<p><strong>The goal of HTML/CSS is to inform a web browser how to format the data it receives without it having to click around on a graph interface.</strong></p>\n<p>For the most part, you tell the browser <em>what</em> goes on the screen (heading, paragraph, image, etc) with HTML, and you tell it <em>how</em> it should look with CSS. There are some cases where the two share duties, though.</p>\n<p class=\"closing\">Let's check out what goes on the screen</p>",
    "sectionType": "chapter",
    "sequence": 2,
    "parentSection": {
      "parentSectionType": "module",
      "parentSectionSequence": 1,
      "parentSectionSlug": "html-css"
    }
  },
  {
    "title": "HTML Basics",
    "slug": "html-basics",
    "content": "<h2 id=\"htmlbasics\">HTML Basics</h2>\n<p>HTML describes the structure of a page.</p>\n<p>The browser reads HTML documents left-right, top-bottom. As the browser reads the pages sequentially, it needs context clues to know where in the structure it is. The browser needs something like:</p>\n<pre><code>**begin rendering heading** This is the Title of the Article **stop rendering heading**\n\n**begin rendering paragraph** This is the content of the article. The text is probably smaller here. **end rendering paragraph**\n\n**begin rendering image** [picture of cats] **end rendering image**\n</code></pre>\n<p>Luckily, the format of how to tell the browser when to begin and end has been standardized. HTML uses <strong>elements</strong> to describe the structure of a page.</p>\n<p>Elements are structured as so:</p>\n<p><img src=\"http://schoolsofweb.com/wp-content/uploads/anatomy-of-an-html-element.jpg\" alt=\"example h1 tag with content\" /></p>\n<p>All elements have a opening tag, most elements contain content (but not all), most elements have a closing tag (<em>remember the slash!</em>)(but not all). Learn the edge cases as you come across them, but don't worry about memorizing them up front.</p>\n<p><strong>Set this to heart:</strong> Opening tag, content, closing tag. You're halfway there.</p>\n<p class=\"closing\">Let's learn some elements.</p>",
    "sectionType": "chapter",
    "sequence": 3,
    "parentSection": {
      "parentSectionType": "module",
      "parentSectionSequence": 1,
      "parentSectionSlug": "html-css"
    }
  },
  {
    "title": "HTML Elements",
    "slug": "html-elements",
    "content": "<h2 id=\"theimportantelements\">The Important Elements</h2>\n<p>There are a lot of HTML tags. Most of them you'll barely use. <a href=\"http://www.99lime.com/_bak/topics/you-only-need-10-tags/\">This article</a> goes as far as to say that there are only 10 tags that you really need. That's an interesting assertion, and a great place to start.</p>\n<p>Here is a basic HTML layout:</p>\n<pre><code class=\"html language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n   &lt;head&gt;\n       &lt;meta charset=\"utf-8\"&gt;\n       &lt;title&gt;Webpage Title!&lt;/title&gt;\n   &lt;/head&gt;\n\n   &lt;body&gt;\n       &lt;h1&gt;Hello World&lt;/h1&gt;\n   &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<ol>\n<li><strong>HTML</strong> - It wraps all other elements.</li>\n<li><strong>Head</strong> - For site meta data.<ul>\n<li>The Head also contains a <code>&lt;title&gt;</code> element that holds the text that appears on the web browser's tab.</li></ul></li>\n<li><strong>Body</strong> - Contains the main content of the site.<ul>\n<li>All of the following elements go in the <code>&lt;body&gt;</code> tag</li>\n<li>A basic html skeleton:</li></ul></li>\n<li><strong>Headings</strong> - for establishing a new topic<ul>\n<li>Headings come in 6 sizes: (in <em>decreasing</em> size) h1, h2, h3, h4, h5, h6</li>\n<li>Without additional styling, a browser will render a heading with a large font size, at a bolder weight (heavier, darker), and on its own line.</li>\n<li>A heading element is written as so: <code>&lt;h1&gt;This is a Title&lt;/h1&gt;</code></li></ul></li>\n<li><strong>Paragraph</strong> - for everyday text needs<ul>\n<li>A paragraph element is written as so: <code>&lt;p&gt;This is a paragraph element&lt;/p&gt;</code></li></ul></li>\n<li><strong>Anchor</strong> - for linking<ul>\n<li>Anchor tags produce links on the page.</li>\n<li>This is one of the most important parts of the whole internet!</li>\n<li>Between the opening and closing tags of an Anchor element go the words that will be rendered to the page</li>\n<li>Anchor tags require a special attribute, <code>href</code></li>\n<li>An attribute is declared in the opening tag of an element and is used to give the browser more information about the element</li>\n<li>The <code>href</code> attribute tells the browser what page should be navigated to when the link is clicked</li>\n<li>The following will produce a link that reads 'Go to Facebook' and then directs the browser to the facebook homepage when clicked:</li>\n<li><code>&lt;a href='http://facebook.com'&gt;Go to Facebook&lt;/a&gt;</code></li></ul></li>\n<li><strong>Img</strong> - for putting an image on the screen<ul>\n<li>the Img tag is used when you would like to render an image in the browser</li>\n<li>Like the Anchor, Img tags require attributes to be read correctly by the browser</li>\n<li>The two attributes: <code>src</code> and <code>alt</code></li>\n<li><code>src</code> is short for source, and is the actual image file to be rendered. It can be a local image like <code>cats.jpg</code> or a web url like <code>http://bit.ly/2nRCqcv</code></li>\n<li><code>alt</code> is a text description of the image and will be read by screen readers for the visually impaired</li>\n<li>An Img element is written as so: <code>&lt;img src='http://bit.ly/2nRCqcv' alt='a cute kitten' /&gt;</code></li>\n<li><strong>Notice:</strong> This is a <em>self-closing</em> tag. There is no closing tag! There <em>is</em> a slash at the end of what is <em>usually</em> the opening tag.</li></ul></li>\n<li><strong>Div</strong> - Used for breaking the page into sections<ul>\n<li>Divs don't render anything to the screen. They are used to group together like information for styling later with css.</li>\n<li>In HTML5, there are more semantic (descriptive) sectioning elements such as <code>section</code>, <code>article</code>, <code>aside</code>, etc. These function much like divs, but aid the browser and web crawlers at analyzing what a site contains. If interested, <a href=\"https://www.w3schools.com/html/html5_semantic_elements.asp\">read more here</a></li>\n<li>This is an example of a Div grouping together an article teaser:\n<code>\n\n¨K9K\n\n</code></li></ul></li>\n<li><strong>Italic</strong> - for visually emphasizing text<ul>\n<li>An italic element is places around any text you want slanty!</li>\n<li>If you would click the <code>i</code> icon in a word processer, wrap the words in an italic element instead!</li>\n<li>An italic element is used as so: <code>&lt;p&gt;I have something &lt;i&gt;very important&lt;/i&gt; to tell you&lt;/p&gt;</code></li>\n<li>Notice when I finished emphasizing 'very important', I closed the italic. Only the words 'very important' will be rendered italic.</li></ul></li>\n<li><strong>Bold</strong> - Another visual emphasizer<ul>\n<li>This is used the same way as Italic, but makes the words dark instead of slanty</li>\n<li>Example: <code>&lt;p&gt;I have something &lt;b&gt;very important&lt;/b&gt; to tell you.&lt;/p&gt;</code></li></ul></li>\n</ol>\n<p>An distinction that is important to make is whether an element is displayed 'inline' or 'block-level'. Speed-read <a href=\"https://www.impressivewebs.com/difference-block-inline-css/\">this article</a>, then save it to your favorites. If you're like 90% of developers, you'll be needing it again.</p>",
    "sectionType": "chapter",
    "sequence": 4,
    "parentSection": {
      "parentSectionType": "module",
      "parentSectionSequence": 1,
      "parentSectionSlug": "html-css"
    }
  },
  {
    "title": "HTML Attributes",
    "slug": "html-attrs",
    "content": "<h2 id=\"htmlattributes\">HTML Attributes</h2>\n<p>Attributes provide additional, pertinent information about an element to the browser. For example, what good would a link be without actually linking to a site? Or how even would an image tag work without…an image?</p>\n<p>Let's cover the one's we've seen plus a couple of new ones:</p>\n<ol>\n<li><strong>href</strong> - used to specify the url a link directs to <a href=\"https://www.w3schools.com/tags/att_a_href.asp\">see more</a><ul>\n<li><code>&lt;a href=\"http://twitter.com\"&gt;Go to Twitter&lt;/a&gt;</code></li></ul></li>\n<li><strong>src</strong> - used to specify the <em>source</em> of an image</li>\n<li><strong>alt</strong> - used to give an alternative text for screen readers or as a backup if the source of an image is not found<ul>\n<li><code>&lt;img src=\"puppies.jpg\" alt=\"puppies playing\"&gt;</code></li></ul></li>\n<li><strong>class</strong> - used to provide a hook for CSS to find elements to style<ul>\n<li>For example, in CSS, we can specify a rule that all elements with a class of 'red' be rendered with red text. On the HTML side, we must mark the elements that we want to have red text with the class 'red'\n<code>\n\n¨K5K\n\n¨K6K\n\n¨K7K\n\n</code></li></ul></li>\n<li><strong>id</strong> - used to provide a hook for CSS to find <em>a single element</em> to style<ul>\n<li>This is used much the same way as class, only <em>one</em> element should be given a certain id name.</li>\n<li>More than one element can have an id, but the ids must be distict from each other\n<code>\n\n¨K9K\n\n¨K10K\n\n</code></li></ul></li>\n</ol>\n<p class=\"closing\">Let's test our knowledge</p>",
    "sectionType": "chapter",
    "sequence": 5,
    "parentSection": {
      "parentSectionType": "module",
      "parentSectionSequence": 1,
      "parentSectionSlug": "html-css"
    }
  },
  {
    "title": "HTML Exercise",
    "slug": "basic-html-exercise",
    "content": "<h2 id=\"exercise\">Exercise</h2>\n<p><strong>Recreate this webpage</strong>\n<img src=\"https://indesignsecrets.com/wp-content/uploads/2007/08/html2-finalpage.gif\" alt=\"old school web page\" /></p>\n<p>What's important is the couple of headers, plus some bold and italic words, and an image.</p>\n<p>All that latin-y stuff is Lorem Ipsum. Feel free to copy the following text for the paragraphs:</p>\n<pre><code>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Sed exercitationem necessitatibus, quo doloremque quos molestias totam eaque dicta repellat cupiditate, nulla, aspernatur eum nisi reprehenderit? Iste sequi, quis itaque dicta culpa ut id perspiciatis dolorum quidem ipsum aspernatur sunt voluptatum natus. Maiores tenetur vero optio, ea beatae aut expedita dolore? Commodi id fugit autem ratione vero nihil aut quidem. Hic sapiente, provident nostrum quaerat dolorem nihil eius distinctio quo. Nesciunt nisi quaerat sed accusamus, optio.\n</code></pre>\n<p class=\"closing\">Now that the elements are on the page, let's make them look Better</p>",
    "sectionType": "chapter",
    "sequence": 6,
    "parentSection": {
      "parentSectionType": "module",
      "parentSectionSequence": 1,
      "parentSectionSlug": "html-css"
    }
  },
  {
    "title": "Introduction to CSS",
    "slug": "css-basics",
    "content": "<h2 id=\"introductiontocss\">Introduction to CSS</h2>\n<p>HTML declares what elements are on the pages, CSS tells the browser how those elements should look.</p>\n<p>How this works is that CSS associates <em>style rules</em> with various elements. Rules look like so:</p>\n<p><img src=\"http://learnwebcode.com/wp-content/uploads/2010/02/anatomy-of-a-css-rule.gif\" alt=\"anatomy of a css rule\" /></p>\n<ol>\n<li>The <strong>Selector</strong> is usually either an HTML element tag-name, class attribute value, or id attribute value.</li>\n</ol>\n<ul>\n<li>If a selector matches more than one element, <em>all</em> elements matched will receive the style rule.</li>\n<li>To select all elements of a given type, the selector must be the element's tag name with no brackets, e.g., <code>a</code> or <code>p</code></li>\n<li>To select all elements of a custom class attribute, prepend the class name with a <code>.</code>, e.g., <code>.red-text</code> or <code>.text-center</code></li>\n<li>To select the <em>hopefully</em> one element of a given id, prepend the custom id with a <code>#</code>, e.g., <code>#page-title</code> or <code>#sidebar</code></li>\n<li>You can even select elements <em>relative</em> to other elements. <a href=\"https://www.w3schools.com/cssref/css_selectors.asp\">Check it out</a></li>\n</ul>\n<ol>\n<li><p><strong>Open Curly Brace</strong></p></li>\n<li><p>The <strong>Property</strong> is the quality of the element that will be changed. This always goes to the left of the colon.</p></li>\n</ol>\n<ul>\n<li>Example properties include: color, backgorund-color, font-size</li>\n</ul>\n<ol>\n<li><p>The <strong>Value</strong> is the new value of the property to its left. Every property has it's own set of valid values. (For example, you can set font-size to 44px, but not to purple.)</p></li>\n<li><p><strong>Semi-colon</strong></p></li>\n<li><p><strong>Repeat</strong> the <em>property: value;</em> syntax for as many rules as you'd like to apply to the selected elements.</p></li>\n<li><p><strong>Close Curly Brace</strong></p></li>\n</ol>\n<hr>\n<h3 id=\"location\">Location</h3>\n<p>CSS can go in an external file, but for now, let's write our CSS in the same file as our HTML.</p>\n<p>The rules go within <code>&lt;style&gt;&lt;/style&gt;</code> tags, and the style tags go within the <code>&lt;head&gt;&lt;/head&gt;</code> tag. It'll look something like:</p>\n<pre><code>...\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;Awesome Site&lt;/title&gt;\n\n    &lt;style&gt;\n      h1 {\n        color: red;\n      }\n\n      .article {\n        font-size: 14px;\n      }\n\n      /* more rules here */\n    &lt;/style&gt;\n\n  &lt;/head&gt;\n...\n</code></pre>\n<p class=\"closing\">Let's check out some properties!</p>",
    "sectionType": "chapter",
    "sequence": 7,
    "parentSection": {
      "parentSectionType": "module",
      "parentSectionSequence": 1,
      "parentSectionSlug": "html-css"
    }
  },
  {
    "title": "CSS Properties",
    "slug": "css-props",
    "content": "<h2 id=\"commoncssproperties\">Common CSS Properties</h2>\n<ol>\n<li><strong>color</strong> - This changes the color of the text within the selected elements</li>\n</ol>\n<ul>\n<li>Valid values can be in hex, rgb, or HTML color codes</li>\n</ul>\n<ol>\n<li><strong>text-align</strong> - Align the text of block-level elements</li>\n</ol>\n<ul>\n<li>Values can be left, right, center, or justify</li>\n</ul>\n<ol>\n<li><strong>text-decoration</strong> - Extra lines around your text</li>\n</ol>\n<ul>\n<li>Values can be none, underline, overline, strikethough</li>\n<li>Usually used to remove underline from links (<code>&lt;a&gt;</code>)</li>\n</ul>\n<ol>\n<li><strong>font-family</strong> - Specify the font for a selected element</li>\n</ol>\n<ul>\n<li>Examples: serif, sans-serif, cursive</li>\n</ul>\n<ol>\n<li><strong>font-weight</strong> - Change font of element to be bold or less bold</li>\n</ol>\n<ul>\n<li>Values: lighter, normal, bolder, bolder</li>\n</ul>\n<ol>\n<li><strong>font-size</strong> - change the font size of text within an element</li>\n<li><strong>background-color</strong> - Set the background color of an element</li>\n<li><strong>background-image</strong> - Set the background of an element to an image</li>\n</ol>\n<ul>\n<li>Value must be in form: <code>url(\"image.png\")</code> where image.png is the path to the image desired in the background</li>\n</ul>\n<ol>\n<li><strong>margin</strong> - add space between an element and it's surroundings</li>\n</ol>\n<ul>\n<li>Values in px or any spacial unit</li>\n</ul>\n<p>CSS properties and values can go on forever. Don't worry about memorizing them all.</p>\n<p>Here's a <a href=\"http://www.openbookproject.net/tutorials/getdown/css/resources/lesson1/css_properties.html\">good place to start</a>. </p>\n<p>Here's a <a href=\"https://www.w3schools.com/cssref/\">semi-exhaustive list</a>.</p>\n<p class=\"closing\">Let's head into an exercise.</p>",
    "sectionType": "chapter",
    "sequence": 8,
    "parentSection": {
      "parentSectionType": "module",
      "parentSectionSequence": 1,
      "parentSectionSlug": "html-css"
    }
  },
  {
    "title": "CSS Exercise",
    "slug": "basic-css-exercise",
    "content": "<h2 id=\"cssexercise\">CSS Exercise</h2>\n<p>Remember this guy?</p>\n<p><img src=\"https://indesignsecrets.com/wp-content/uploads/2007/08/html2-finalpage.gif\" alt=\"old school web page\" /></p>\n<p>Make it look different! Do what you want with it! Change font-sizes! Change colors! Add the <code>display: none</code> rule to an element or two!</p>\n<p>Go crazy.</p>\n<p class=\"closing\">Then go on to the main exercise</p>",
    "sectionType": "chapter",
    "sequence": 9,
    "parentSection": {
      "parentSectionType": "module",
      "parentSectionSequence": 1,
      "parentSectionSlug": "html-css"
    }
  },
  {
    "title": "Main Exercise",
    "slug": "main-exercise",
    "content": "<h2 id=\"mainevent\">Main Event</h2>\n<p>Recreate a site like the one found <a href=\"https://something-like-this.surge.sh\">here</a></p>\n<p>It doesn't have to be an exact replica. Make it your own, and have fun!</p>\n<h3 id=\"notes\">Notes:</h3>\n<ul>\n<li><p>Check out the <a href=\"https://www.w3schools.com/cssref/\">CSS Reference</a> if you're feeling stuck, or maybe for inspiration!</p></li>\n<li><p>Icons can be found <a href=\"https://www.iconfinder.com/iconsets/social-icons-circular-black\">here</a>. Be sure to attribute the designer by linking back to their profile.</p></li>\n<li><p>Here's some boilerplate to get you started!</p></li>\n</ul>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;YOUR TITLE HERE&lt;/title&gt;\n    &lt;style&gt;\n\n      * {\n        box-sizing: border-box;\n        margin: 0;\n        padding: 0;\n      }\n\n      body {\n        font-family: 'Helvetica', sans-serif;\n      }\n\n      /* YOUR CSS HERE */\n    &lt;/style&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n\n    &lt;!-- HEADER --&gt;\n    &lt;div&gt;\n\n    &lt;/div&gt;\n\n    &lt;!-- PICTURE/QUOTE --&gt;\n    &lt;div&gt;\n      &lt;!-- cough*cssbackgroundimage*cough --&gt;\n    &lt;/div&gt;\n\n    &lt;!-- ABOUT ME --&gt;\n    &lt;div&gt;\n\n    &lt;/div&gt;\n\n    &lt;!-- FOOTER --&gt;\n    &lt;div&gt;\n\n    &lt;/div&gt;\n\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p class=\"closing\">Next, get that site online!</p>",
    "sectionType": "chapter",
    "sequence": 10,
    "parentSection": {
      "parentSectionType": "module",
      "parentSectionSequence": 1,
      "parentSectionSlug": "html-css"
    }
  },
  {
    "title": "Github",
    "slug": "github",
    "content": "<h2 id=\"getgit\">Get Git!</h2>\n<p>This is a walkthough of installing git and deploying your site through github pages.\n<strong>Note:</strong> For terminal based instruction coming up, I will say \"run <code>$ cd ..</code>\". The <code>$</code> syntax denotes running in your terminal or command line, so you don't have to type the $ or the space after it. Only type the words that follow.</p>\n<ol>\n<li><a href=\"https://github.com\">Create a Github account</a> if you dont already have one.</li>\n<li>Download and Setup Git:</li>\n</ol>\n<ul>\n<li>Follow the instructions <a href=\"https://help.github.com/articles/set-up-git/\">found here</a><ul>\n<li>Be sure to select the operating system that <em>you</em> are running</li></ul></li>\n</ul>\n<ol>\n<li>Log into your Github account and select the 'New Repository' icon near the top right of the screen.</li>\n</ol>\n<ul>\n<li>Alternatively, go <a href=\"https://github.com/new\">here</a></li>\n</ul>\n<ol>\n<li><strong>Name your repository username.github.io, replacing username with your GitHub username. Be sure it is public and go ahead and tell GitHub to create a README file upon generating the repo.</strong> </li>\n<li>Copy the reposititory's address. Google \"how to copy a github repository's address\" if it is not clear how to do so.</li>\n<li>In your computer's terminal, make sure you are in the same directory as the site you just built.</li>\n</ol>\n<ul>\n<li>run <code>$ git init</code></li>\n<li>run <code>$ git remote add origin COPIED_REPO_ADDRESS</code></li>\n<li>rename your main HTML file to index.html if it is not already</li>\n<li>run <code>$ git push origin master</code></li>\n<li>Check out <a href=\"http://jmcglone.com/guides/github-pages/\">this walkthrough</a> if you get stuck</li>\n</ul>\n<h4 id=\"andcongratulationsyoupersonalsiteisnowliveathttpyourusernamegithubio\">And Congratulations! You personal site is now live at http://YOUR-USERNAME.github.io.</h4>\n<p>Hope you had fun! Feel free to reach out to me on Meetup or however you can find me!</p>",
    "sectionType": "chapter",
    "sequence": 11,
    "parentSection": {
      "parentSectionType": "module",
      "parentSectionSequence": 1,
      "parentSectionSlug": "html-css"
    }
  },
  {
    "title": "Intermediate Tools and Process",
    "slug": "tools-and-process",
    "content": "",
    "sectionType": "module",
    "sequence": 2,
    "parentSection": null
  },
  {
    "title": "Introduction",
    "slug": "introduction-tools-and-process",
    "content": "<h1 id=\"welcometothenextstepsofwebdevelopmentwebdevelopment201\">Welcome to the next steps of Web Development: WebDevelopment 201</h1>\n<p><em><strong>PHEW</strong></em></p>\n<p>That first lesson was a mad dash and a doozy rolled into one. The good part is that <em>it's over</em> and now you know the basics of how HTML and CSS interact.</p>\n<p>It's time to move into a high-level overview of the process of building a site. This will include the steps that you will take <em>every single time</em> you build a new project, so it's best to get these down pat as soon as possible.</p>\n<p><strong>Didn't quite finish the first course?</strong> That's fine. You probably got slowed down by one of these workflows. Go through these walk-throughs then return to the previous project. You will probably work through it faster.</p>\n<h3 id=\"whatstheplan\">What's the plan?</h3>\n<p>As always, our time together is limited. You will be given <em>need to know</em> information and in-depth resources to follow-up with on the following subjects:</p>\n<p><strong>1. Terminal / Command Line</strong> - We'll learn to love navigating our file system without using a mouse.</p>\n<p><strong>2. Text Editors</strong> - We'll go through the most used workflows in Sublime Text and Atom text editors.</p>\n<p><strong>3. Git Version Control</strong> - We'll cover the top commands you'll need to always keep your programs synced and up to date.</p>\n<p><strong>4. (Optional) More HTML/CSS Practice</strong> - Continue to work on the personal site from the previous course. Once you're done with that, let's build Facebook's homepage.</p>\n<p class=\"closing\">Ready?! Let's get to it.</p>",
    "sectionType": "chapter",
    "sequence": 0,
    "parentSection": {
      "parentSectionType": "module",
      "parentSectionSequence": 2,
      "parentSectionSlug": "tools-and-process"
    }
  },
  {
    "title": "What You'll Need",
    "slug": "what-needed-tools-and-process",
    "content": "<h2 id=\"youwillneed\">You will need</h2>\n<ol>\n<li><p><strong>A terminal application</strong></p>\n<ul>\n<li>Mac: On OS X, open your Applications folder, then open the Utilities folder. Open the Terminal application.</li>\n<li>Windows: Open the start menu, and type <code>cmd</code> + Enter.</li>\n<li>Linux, Ubuntu: Click \"Search your computer\" on your launcher. Search for \"terminal\" and select it.</li>\n<li>If your OS or distro isn't listed, go to <a href=\"https://google.com\">this website</a> and type in \"where is terminal on [YOUR OS]\". Press enter.</li></ul></li>\n<li><p><strong>A text editor</strong></p>\n<ul>\n<li>If just starting out, I recommend <a href=\"https://atom.io/\">Atom</a> or <a href=\"https://www.sublimetext.com/3\">Sublime Text 3</a>.</li>\n<li>The text editor installation lesson will cover getting these up and running.</li></ul></li>\n<li><p><strong>A web browser</strong></p>\n<ul>\n<li>I highly recommend <a href=\"https://www.google.com/chrome/browser/desktop\">Google Chrome</a> or <a href=\"https://www.mozilla.org/en-US/firefox/new\">Mozilla Firefox</a>.</li>\n<li>If you must use Internet Explorer…</li></ul></li>\n</ol>\n<p><img src=\"http://tfmainsights.com/wp-content/uploads/2010/10/Internet-Explorer-joke.png\" alt=\"internet explorer joke\" /></p>\n<p class=\"closing\">Alright, onto terminal business.</p>",
    "sectionType": "chapter",
    "sequence": 1,
    "parentSection": {
      "parentSectionType": "module",
      "parentSectionSequence": 2,
      "parentSectionSlug": "tools-and-process"
    }
  },
  {
    "title": "Terminal Basics",
    "slug": "terminal-basics",
    "content": "<h2 id=\"terminalbasics\">Terminal Basics</h2>\n<p>What is the terminal? The terminal is a text based interface for interacting with your computer. Open up a terminal and open up a file explorer and place them side by side.</p>\n<p>These two programs have much of the same functionality except the terminal <em>adds superpowers</em> like being able to run a second (third, fourth, etc) program from within itself and have said programs affect the files/directories/operating system. You'll see this in effect when you get to git.</p>\n<p>Go ahead and close the file explorer and try not to open it through these exercises.</p>\n<h4 id=\"howtoreadthefollowinglesson\">How to read the following lesson:</h4>\n<p>If I say \"type <code>$ [somecommand]</code>\" or \"type <code>&gt; [somecommand]</code>\":</p>\n<ul>\n<li><p>Do not type the <code>$</code> or the <code>&gt;</code></p></li>\n<li><p>Do not type the space</p></li>\n<li><p>DO type the words that follow and press Enter</p></li>\n</ul>\n<h3 id=\"openacommandlineapplication\">Open a command line application</h3>\n<ul>\n<li>Mac: On OS X, open your Applications folder, then open the Utilities folder. Open the Terminal application.</li>\n<li>Windows: Open the start menu, and type <code>cmd</code> + Enter.</li>\n<li>Linux, Ubuntu: Click \"Search your computer\" on your launcher. Search for \"terminal\" and select it.</li>\n<li>If your OS or distro isn't listed, go to <a href=\"https://google.com\">this website</a> and type in \"where is terminal on [YOUR OS]\". Press enter</li>\n</ul>\n<p>When you open the application, you should see something like <code>C:\\Users\\yourname&gt;</code> for Windows users or <code>Yourname~$</code> for everyone else. It is after the dollar or greater-than that you will be typing commands.</p>\n<p>Go through each of the following commands, and do the mini-exercise associated with it.</p>\n<h4 id=\"pwdallosprintworkingdirectory\"><code>pwd</code> (all OS) - Print Working Directory</h4>\n<p>Imagine you have opened your \"Documents\" folder within a file explorer. Your doorbell rings, you go to answer it, and when you get back you look at your screen and you're clearly still in your Documents directory. Great.</p>\n<p>Now imagine the scenario, but instead, you have navigated to the \"Documents\" directory from within the terminal. When you get back to your computer, there's a good chance it won't be clearly visible which directory you are in based solely on the terminal window.</p>\n<p>If that's the case, type <code>$ pwd</code>, and your working directory will be printed to the screen.</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/wwcode-webdev/pwd-unix.png\" alt=\"example of pwd\" /></p>\n<div class=\"mini-exercise\">\n  <b>Mini Exercise</b><br>\n  type <code>$ pwd</code>\n</div>\n<h4 id=\"lsalloslistdirectorycontents\"><code>ls</code> (all OS) - List Directory Contents</h4>\n<p>Now that you know what directory you're in, you probably want to know what files and inner directories have access to. This is the equivalent of viewing the files and folders from the graphic interface of a file explorer.</p>\n<p>Type <code>$ ls</code> to see the contents</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/wwcode-webdev/ls-unix.png\" alt=\"example of ls\" /></p>\n<p>The contents of your directory may not be as colorful as those in the picture.</p>\n<div class=\"mini-exercise\">\n  <b>Mini Exercise</b><br>\n  <p>type <code>$ ls</code></p>\n</div>\n<hr />\n<h4 id=\"cdalloschangedirectory\"><code>cd</code> (all OS) - Change Directory</h4>\n<p>If you are in a directory and want to move into a subdirectory (or even move up a directory), use <code>cd</code>. This is the same as double-clicking a folder in a file explorer.</p>\n<p>To move into a subdirectory, type <code>$ cd [DIRECTORY NAME]</code></p>\n<p>To move into the direct parent directory, type <code>$ cd ..</code> (that's <code>cd</code> with two dots)</p>\n<p><strong>Note</strong>: For Mac and Linux, directory and file names are case-sensitive. <code>Documents</code> is not the same as <code>documents</code>.</p>\n<p>In the following picture, I print my initial working directory, <code>pwd</code>. Then I change directory, <code>cd</code>, to a folder within the directory I am in. When I <code>pwd</code> the next time, I am in a new working directory.</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/wwcode-webdev/cd-unix.png\" alt=\"example of cd\" /></p>\n<div class=\"mini-exercise\">\n  <b>Mini Exercise</b><br>\n  <p>type <code>$ pwd</code> and make note of your directory</p>\n  <p>type <code>$ ls</code> and look for a directory <em>within</em> your current directory</p>\n  <p>type <code>$ cd [name of directory you found]</code></p>\n  <p>type <code>$ pwd</code> and make note of your new working directory</p>\n  <p>type <code>$ ls</code> to verify that, indeed, you are in a different folder with different contents</p>\n  <p>type <code>$ cd ..</code> then <code>pwd</code>. You should be back in your original directory.</p>\n</div>\n<hr />\n<h3 id=\"mkdirallosmakedirectory\"><code>mkdir</code> (all OS) - Make Directory</h3>\n<p>Sometime you will want to make a whole new folder to store your awesome new files. This is where <code>mkdir</code> comes into play.</p>\n<p><code>$ mkdir [name of new directory]</code> is equivalent to clicking the new folder icon and naming the new folder that appears.</p>\n<p>In the following picture, I print my initial working directory, <code>pwd</code>, and list its contents <code>ls</code>. Then I make a new directory named \"cool-directory\" <em>within</em> my working directory. When I list contents again, <code>ls</code>, the new directory is available.</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/wwcode-webdev/mkdir-unix.png\" alt=\"example of mkdir\" /></p>\n<div class=\"mini-exercise\">\n  <b>Mini Exercise</b><br>\n  <p>type <code>$ mkdir cool-directory</code></p>\n  <p>type <code>$ ls</code> and notice that \"cool-directory\" is now listed</p>\n  <p>type <code>$ cd cool-directory</code> to change working directories to \"cool-directory\"</p>\n  <p>type <code>$ ls</code> and notice... nothin'!</p>\n  <p>It's a brand new empty directory. Let's add a file.</p>\n</div>\n<hr />\n<h3 id=\"touchmaclinuxtypenulwindowsmakefile\"><code>touch</code> (Mac, Linux), <code>type NUL &gt;</code> (Windows) - Make File</h3>\n<p>Let's say I am in my new directory, <code>cool-directory</code>, and I would like to add a file called <code>index.html</code> so that I can begin typing up some HTML. I would type:</p>\n<p><code>touch index.html</code> if on Mac or Linux</p>\n<p>or</p>\n<p><code>type NUL &gt; index.html</code> if on Windows</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/wwcode-webdev/touch-unix.png\" alt=\"example of touch\" /></p>\n<div class=\"mini-exercise\">\n  <b>Mini Exercise</b><br>\n  <p>type <code>$ pwd</code> to make sure you are in \"cool-directory\" that you made in the last exercise</p>\n  <p>if you are not, use <code>cd</code> to get to the right spot</p>\n  <p>type <code>$ touch index.html</code> or <code>> type NUL > index.html</code> to create an index.html file</p>\n  <p>type <code>ls</code> and verify that the file is there</p>\n</div>\n<hr />\n<h3 id=\"rmallosremovefile\"><code>rm</code> (all OS), Remove file</h3>\n<p>If you need to remove a file, type: <code>rm [filename]</code></p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/wwcode-webdev/rm-unix.png\" alt=\"example of rm\" /></p>\n<hr />\n<h3 id=\"rmdirallosremovedirectory\"><code>rmdir</code> (all OS), Remove Directory</h3>\n<p>If you need to remove a directory, type: <code>rmdir [directory name]</code></p>\n<p><strong>Note:</strong> If you need to remove a directory <em>that contains other directories</em>, you must use the command <code>rm -rf [directory name]</code></p>\n<p>The <code>-rf</code> signifies that you want to <em><strong>r</strong>ecursively</em> <em><strong>f</strong>orce</em> remove the inner directories</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/wwcode-webdev/rmdir-unix.png\" alt=\"example of rmdir\" /></p>\n<div class=\"mini-exercise\">\n  <b>Mini Exercise</b><br>\n  <p>type <code>$ pwd</code> to make sure you are in \"cool-directory\" that you made in the last exercise</p>\n  <p>if you are not, use <code>$ cd</code> to get to the right spot</p>\n  <p>type <code>$ mkdir cat-folder</code>, then check out your handy work with <code>$ ls</code></p>\n\n  <p>type <code>$ rm index.html</code> to get delete the text file</p>\n  <p>type <code>$ rmdir cat-folder</code> to remove the directory you just made</p>\n  <p>type <code>$ cd ..</code> to move into \"cool-directory\"'s parent folder</p>\n  <p>type <code>rmdir cool-directory</code> &mdash; it's been a good run.</p>\n</div>\n<hr />\n<p>Those are the basics that you need to get started, but it's not even <em>close</em> to the versitility of events and programs you can run from the command line.</p>\n<p>I recommend spending time outside of this study group with this <a href=\"https://learnpythonthehardway.org/book/appendixa.html\">Command Line Crash Course</a>.</p>\n<div class=\"mini-exercise\">\n  <b>Final Exercise</b><br>\n  Run through all of the mini exercises above until you are comfortable navigating around with just a terminal.\n</div>\n<video controls>\n  <source src=\"https://s3-us-west-2.amazonaws.com/wwcode-webdev/terminal-ex.mov\" type=\"video/mov\">\n  <source src=\"https://s3-us-west-2.amazonaws.com/wwcode-webdev/terminal-ex.mp4\" type=\"video/mp4\">\n  Your browser does not support the video tag.\n</video>\n<p class=\"closing\">Move on when you're ready!</p>",
    "sectionType": "chapter",
    "sequence": 2,
    "parentSection": {
      "parentSectionType": "module",
      "parentSectionSequence": 2,
      "parentSectionSlug": "tools-and-process"
    }
  },
  {
    "title": "Text Editors",
    "slug": "text-editors",
    "content": "<h2 id=\"texteditors\">Text Editors</h2>\n<p>What is a text editor anyway?</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/wwcode-webdev/text-editor.png\" alt=\"definintion of text editor\" /></p>\n<p>Thanks, Google!</p>\n<p>Really, though, it's where you are going to be typing al of your code or markup. It's a lot like a word processor like Microsoft Word, but instead of the focus being on format and printing, a text editor is solely focused on presenting text to be edited. Computers don't need fancy <em>italics</em> to understand the instructions.</p>\n<h3 id=\"installation\">Installation</h3>\n<p>If you are having trouble installing the editors through their usual install page, follow these instructions:</p>\n<p><a href=\"http://docs.sublimetext.info/en/latest/getting_started/install.html\">Sublime Installation Guide</a></p>\n<p><a href=\"http://flight-manual.atom.io/getting-started/sections/installing-atom/\">Atom Installation Guide</a></p>\n<p>Let's walk through the basics of using the editors.</p>\n<h3 id=\"sublimetext23andatom\">Sublime Text 2/3 and Atom</h3>\n<ol>\n<li><p>The first thing you do is make the folder that you want to work in via the terminal commands covered in the last lesson or through a file explorer.</p></li>\n<li><p>Next, within the toolbar's file menu, select, \"Open Folder\". Select the folder you've just created.</p>\n<ul>\n<li><strong>Atom</strong>: optional quick-key <code>ctrl/cmd-shift-O</code> (oh)</li></ul></li>\n<li><p>If there are already files in the folder, they will appear in the side bar.</p></li>\n<li><p>To make a new file, you can right click the folder in the sidebar and select 'New File'.</p></li>\n<li><p>To make a new folder, you can right click the main foler in the sidebar, and select \"New Folder\"</p></li>\n<li><p>While focued on a text document you are editing, the usual keyboard shortcuts work: <code>ctrl/cmd + s</code> to save, <code>ctrl/cmd + f</code> to find, <code>ctrl/cmd + shift+ s</code> to save as, etc.</p></li>\n<li><p>Opening an HTML File:</p>\n<ul>\n<li><strong>Sublime</strong>: If you have a pure HTML file, you can right-click within the body of the file and select \"Open in Browser\" to view the page in a browser.</li>\n<li><strong>Atom</strong>: Right click the file in the sidebar and select 'Copy full file path'. Paste the file path in the url bar of your favorite web browser.</li>\n<li>If you make changes, refresh the browser to see the updated version.</li></ul></li>\n</ol>\n<h3 id=\"setupatomandsublimecommandlinecommands\">Set up Atom and Sublime command line commands</h3>\n<p>This step is optional.</p>\n<p>You may have found it weird that we went through all of the trouble of learning how to navigate our computers <em>without</em> file explorers only to still navigate with the explorers to open folders in our text editors. If only somehow we could open out editors straight from our terminals…</p>\n<p><img src=\"http://www.troll.me/images2/what-if-i-told-you/what-if-i-told-you.jpg\" alt=\"what if I told you meme\" /></p>\n<p>…you totally can!</p>\n<p>Sublime Text 3 and Atom both <em>supposedly</em> ship with command line tools to help you open files and folders from the command line. So, instead of going through the file menu, navigate <em>in your teminal</em> to the directory that you would like to open in your text editor, then run the respective command:</p>\n<ul>\n<li><strong>Sublime</strong>: <code>$ subl .</code></li>\n<li><strong>Atom</strong>: <code>$ atom .</code></li>\n</ul>\n<p>What's going on there? You're telling your computer to find the program indicated by the first word. Then <em>with that program</em> open the file(s) indicated by the second word. In this case, the <code>.</code> (dot) indicates the current working directory of the terminal.</p>\n<p>If you wanted to open a single file, you could type:</p>\n<ul>\n<li><strong>Sublime</strong>: <code>$ subl index.html</code></li>\n<li><strong>Atom</strong>: <code>$ atom style.css</code></li>\n</ul>\n<h3 id=\"didthosecommandnotwork\">Did those command not work?</h3>\n<p><strong>Welcome to the jungle.</strong> You've hit one of your first trials by fire of web development.</p>\n<p>Check out these links for help:</p>\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/22390709/how-to-open-atom-editor-from-command-line-in-os-x\">Atom troubleshooting</a> (despite the title, the answers are not exclusively for mac)</li>\n<li>Sublime Troubleshooting - <a href=\"https://scotch.io/tutorials/open-sublime-text-from-the-command-line-using-subl-exe-windows\">Windows</a>, <a href=\"http://stackoverflow.com/questions/16199581/opening-sublime-text-on-command-line-as-subl-on-mac-os\">Mac/Linux</a></li>\n</ul>\n<p>Remember this step is optional, so don't get bogged down here.</p>\n<hr />\n<p class=\"closing\">Check out the videos next &rarr;</p>",
    "sectionType": "chapter",
    "sequence": 3,
    "parentSection": {
      "parentSectionType": "module",
      "parentSectionSequence": 2,
      "parentSectionSlug": "tools-and-process"
    }
  },
  {
    "title": "Text Editor Workflow",
    "slug": "text-editor-workflow",
    "content": "<h2 id=\"workflowvideos\">Workflow Videos</h2>\n<p>A quick recap of the last lesson.</p>\n<h3 id=\"sublimetext\">Sublime Text</h3>\n<video width=\"720\" height=\"450\"controls>\n  <source src=\"https://s3-us-west-2.amazonaws.com/wwcode-webdev/sublime.mov\" type=\"video/mov\">\n  <source src=\"https://s3-us-west-2.amazonaws.com/wwcode-webdev/sublime.mp4\" type=\"video/mp4\">\n  Your browser does not support the video tag.\n</video>\n<h3 id=\"atomtexteditor\">Atom Text Editor</h3>\n<video controls>\n  <source src=\"https://s3-us-west-2.amazonaws.com/wwcode-webdev/atom.mov\" type=\"video/mov\">\n  <source src=\"https://s3-us-west-2.amazonaws.com/wwcode-webdev/atom.mp4\" type=\"video/mp4\">\n  Your browser does not support the video tag.\n</video>\n<p class=\"closing\">Onward to Git!</p>",
    "sectionType": "chapter",
    "sequence": 4,
    "parentSection": {
      "parentSectionType": "module",
      "parentSectionSequence": 2,
      "parentSectionSlug": "tools-and-process"
    }
  },
  {
    "title": "Git Basics",
    "slug": "git-basics",
    "content": "<h2 id=\"gitbasics\">Git Basics</h2>\n<h3 id=\"whatisgit\">What is Git?</h3>\n<p>Git is a program that keeps track of what your software looked like in the past, what it looks like now, and adding incremental changes to your programs without breaking what is already working. It also gives you the ability to split off new work from the currently working version, so that you have the ability to make mistakes and breaking changes <em>without breaking the main project.</em> If you like the new work, adding it into the existing project takes one command. If you don't like the new work, you can discard it like nothing happened.</p>\n<p>Imagine everytime you made a change to a project, you had to make a brand new directory, copy your existing work into it, make changes in this totally new directory, then <em>somehow</em> when you are finished, totally replace the old work with the new work.</p>\n<p>Ooorrr, you can use a version control manager like Git and have it take snapshots in time of your application. If you like your work, you tell Git to take a new snapshot. If ou don't, you can tell Git to revert the application to a previous snapshot.</p>\n<hr>\n<h3 id=\"installation\">Installation</h3>\n<p>To get Git, use the <a href=\"https://git-scm.com/book/en/v2/Getting-Started-Installing-Git\">official installation guide</a>.</p>\n<hr>\n<h3 id=\"highleveloverview\">High level overview</h3>\n<p>A collection of files that is being tracked by Git is called a repository.</p>\n<p>The <em>actual</em> files are called the Working Directory.</p>\n<p>Git maintains two virtual systems as well:</p>\n<ul>\n<li><strong>Head</strong> which is the most up to date saved version of the Working Directory</li>\n<li>An <strong>Index</strong> or Staging area for changes to files that have been indicated as kept, but not saved to Head yet</li>\n<li>Git also watches for active changes that haven't been indicated as kept yet. This is called your Work in Progress or <strong>WIP</strong></li>\n</ul>\n<h3 id=\"workflow\">Workflow</h3>\n<p>The most common critism of Git is that it is hard to learn. I'll refute that. It's hard to <em>master</em> because of the range of flexibility and commands that it makes available. Don't worry about memorizing <em>all</em> of them right now. As you come across situations where these five don't solve the problem, do a quick online search \"git how to [YOUR TASK]\".</p>\n<p><img src=\"http://i0.kym-cdn.com/photos/images/newsfeed/000/219/551/google-search-coupon.jpg\" alt=\"google coupon\" /></p>\n<ol>\n<li><p>Start a new Git repository - <code>git init</code></p>\n<ul>\n<li>Navigate <em>into</em> a directory that you'd like to start a project and run <code>git init</code></li></ul></li>\n<li><p>Add files, make changes, go wild.</p></li>\n<li><p>Add files to the Staging Area / Index - <code>git add [filename]</code></p>\n<ul>\n<li>This is the same as \"marking a file as kept\"</li>\n<li>In the beginning, you may want to simply add <em>all</em> changes in the directory to the Index. To do that run <code>git add .</code>. (The dot means \"this current directory\".)</li></ul></li>\n<li><p>Save changes to Head - <code>git commit -m \"[descriptive message here]\"</code></p>\n<ul>\n<li>This command tells git to take a snapshot of the current state of the Working Directory <em>with</em> the changes saved on the Index</li>\n<li>Before a git commit, it is trivial to discard any unwanted changes</li></ul></li>\n</ol>\n<h3 id=\"remoterepository\">Remote Repository</h3>\n<p>So far, Git has tracked all of your changes only on your computer, your \"local repository\".</p>\n<p>Now let's say you want to deploy your site online or share the code with teammates.</p>\n<ol start=\"5\">\n<li><p>Make a Remote Repository</p>\n<ul>\n<li>Make a Github account and select \"Create New Repository\" or the \"+\" in the top right</li>\n<li>No need to initialize the repository with a readme</li></ul>\n<p>What this does is create a <em>separate</em> repository/room/bucket/virtual-folder from your local (on computer) repository. You task from here on is to keep these two synced.</p></li>\n<li><p>Connect the Remote Repository - <code>git remote add [repo-nickname] [repo-address]</code></p>\n<ul>\n<li>When you make a repository on Github, it gets a web address like a website. Copy that address.</li>\n<li>In your terminal, navigate to the root directory and run <code>git remote add origin [paste address]</code></li>\n<li>Now your local repository knows about this remote repository and can be kept in sync with simple commands</li></ul></li>\n<li><p>Add file from local to remote - <code>git push</code></p>\n<ul>\n<li><em>After</em> you've commited (<code>git commit</code>) changes to your local Head, you can sync your remote repository with <code>git push [repo nickname] [branch to push]</code></li>\n<li>E.g - <code>git push origin master</code></li></ul></li>\n<li><p>Add more files, make more changes, <code>git add .</code>, <code>git commit -m 'Add cool navbar'</code>, <code>git push origin master</code></p></li>\n</ol>\n<h3 id=\"thatsit\">That's it!</h3>\n<p>There are more intermediate level commands that will be covered in a later lesson. Get a leg up on those with this great <a href=\"http://rogerdudler.github.io/git-guide/\">guide to git</a>.</p>\n<p class=\"closing\">Onward to the exercise!</p>",
    "sectionType": "chapter",
    "sequence": 5,
    "parentSection": {
      "parentSectionType": "module",
      "parentSectionSequence": 2,
      "parentSectionSlug": "tools-and-process"
    }
  },
  {
    "title": "Git Exercise",
    "slug": "git-exercise",
    "content": "<h2 id=\"gitexercise\">Git Exercise</h2>\n<ol>\n<li><p>Make a new directory</p></li>\n<li><p>Add some files</p></li>\n<li><p>Initialize Git within the directory</p></li>\n<li><p>Add the files to the Git staging area</p></li>\n<li><p>Commit the git staging area to Head</p></li>\n<li><p>Make a new remote repository on Github</p></li>\n<li><p>Connect the remote repository to your local repository</p></li>\n<li><p>Sync the two directories by pushing from your local repo</p></li>\n<li><p>Make some changes on your local repository</p></li>\n<li><p>Add and commit those changes</p></li>\n<li><p>Push up to your remote repository to sync the two repositories again.</p></li>\n</ol>\n<video controls>\n  <source src='https://s3-us-west-2.amazonaws.com/wwcode-webdev/git.ogg' type='video/ogg'>\n</video>\n<p class=\"closing\">Finishing up!</p>",
    "sectionType": "chapter",
    "sequence": 6,
    "parentSection": {
      "parentSectionType": "module",
      "parentSectionSequence": 2,
      "parentSectionSlug": "tools-and-process"
    }
  },
  {
    "title": "Finish",
    "slug": "finish",
    "content": "<h2 id=\"finaltask\">Final Task</h2>\n<p>Back to the original goal of finishing up the personal project from the first course.</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/wwcode-webdev/site-preview.png\" alt=\"sample website\" /></p>\n<p>Use the workflows covered in this lesson along with the HTML/CSS basics from the previous lesson to really nail down an awesome site!</p>\n<p>===</p>\n<h3 id=\"finishedwiththepersonalsite\">Finished with the personal site?</h3>\n<p>One project I found really helpful to nail down my understanding was to build the Facebook homepage from scratch.</p>\n<p><img src=\"http://www.coderglass.com/social/images/facebook-style-homepage.JPG\" alt=\"facebook homepage\" /></p>\n<p>If you get stuck, here's a finished product of one way the code could look: <a href=\"http://www.coderglass.com/social/facebook-style-homepage.php\">example code</a>, but try not to rely on that to solve the problem!</p>\n<hr />\n<p>When you are finished with the projects, post them in the <a href=\"http://wwcodedfw.slack.com­\">WWCodeDFW Slack</a>'s WebDev 101 channel.</p>",
    "sectionType": "chapter",
    "sequence": 7,
    "parentSection": {
      "parentSectionType": "module",
      "parentSectionSequence": 2,
      "parentSectionSlug": "tools-and-process"
    }
  },
  {
    "title": "Intermediate HTML and Workflow",
    "slug": "intermediate-html",
    "content": "",
    "sectionType": "module",
    "sequence": 3,
    "parentSection": null
  },
  {
    "title": "Introduction",
    "slug": "introduction-intermediate-html",
    "content": "<h1 id=\"welcometothewebdevelopment301\">Welcome to the WebDevelopment 301</h1>\n<p>This time around we will be loonking at a few concepts that, while necessary to grasp eventually, are not necessary for a basic site. These topics <em>will</em> make even creating a basic site easier, though.</p>\n<h2 id=\"whatstheplan\">What's the plan?</h2>\n<p>If you are in attendance for the live meeting, you will be working through a live walk-through. All of the topics covered in the following lessons will be shown in the walk-through. Don't worry if you haven't worked with them yet; practicing with the walk-through will hopefully show you how simple these intermediate steps are once you understand the basics.</p>\n<p>As always, our time together is limited. The walk-through will take most of the time. When you have time at home, check out the information here covering the following subjects:</p>\n<p><strong>1. Positioning Elements</strong> - How to have fine control over where elements on the page are located.</p>\n<p><strong>2. Positioning with Flexbox</strong> - Flexbox makes positioning elements for all screen sizes more intuitive. Heck, it makes positioning in general more intuitive. Learn to love Flexbox here.</p>\n<p><strong>3. Git Branching Workflow</strong> - One of the major pros of version control is being able to keep new, possible breaking changes away from code that you know works. We'll cover that flow here.</p>\n<p class=\"closing\">Ready?! Let's get to it.</p>",
    "sectionType": "chapter",
    "sequence": 0,
    "parentSection": {
      "parentSectionType": "module",
      "parentSectionSequence": 3,
      "parentSectionSlug": "intermediate-html"
    }
  },
  {
    "title": "What You'll Need",
    "slug": "what-needed-intermediate-html",
    "content": "<h2 id=\"youwillneed\">You will need</h2>\n<ol start=\"2\">\n<li><p><strong>A text editor</strong></p>\n<ul>\n<li>If just starting out, head back into the second course's lesson on text editors.</li></ul></li>\n<li><p><strong>A web browser</strong></p></li>\n<li><p><strong>A Github account</strong></p>\n<ul>\n<li>Not totally necessary, but useful.</li></ul></li>\n</ol>\n<p class=\"closing\">Alright, onto positioning.</p>",
    "sectionType": "chapter",
    "sequence": 1,
    "parentSection": {
      "parentSectionType": "module",
      "parentSectionSequence": 3,
      "parentSectionSlug": "intermediate-html"
    }
  },
  {
    "title": "HTML Document Flow",
    "slug": "document-flow",
    "content": "<h2 id=\"htmldocumentflow\">HTML Document Flow</h2>\n<p>The question positioning answers is: \"Where on the page do I want this element to go?\" Visually, \"how can make something like this?\":</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/wwcode-webdev/blocks.png\" alt=\"blocks in each corner of screen\" /></p>\n<p>Before we go into the position property, it is important to cover the how the browser <em>wants</em> to layout the document. This is called the \"flow\" of the document.</p>\n<p>The browser will stack elements left to right, top to bottom.</p>\n<h3 id=\"blocklevelelements\">Block Level Elements</h3>\n<p>If the element is a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements\">block level</a> element, it will not stack adjacent (to the left or right) of another element, and will begin on its own line.</p>\n<p>Example:</p>\n<pre><code>&lt;!-- paragraphs are block level elements --&gt;\n&lt;p&gt;paragraph 1&lt;/p&gt;\n&lt;p&gt;paragraph 2&lt;/p&gt;\n&lt;p&gt;paragraph 3&lt;/p&gt;\n</code></pre>\n<p>Produces:</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/wwcode-webdev/block.png\" alt=\"paragraphs tags in browser\" /></p>\n<h3 id=\"inlineelements\">Inline Elements</h3>\n<p>If the element is an <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements\">inline</a> or inline-block level element, it will sit on the same line as its non-block level element siblings. These elements cannot have a height or width set, and will only take up the space necessary for their content.</p>\n<p>Example:</p>\n<pre><code>&lt;!-- spans are inline elements --&gt;\n&lt;span&gt;span 1&lt;/span&gt;\n&lt;span&gt;span 2&lt;/span&gt;\n&lt;span&gt;span 3&lt;/span&gt;\n</code></pre>\n<p>Produces:</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/wwcode-webdev/inline.png\" alt=\"span tags in browser\" /></p>\n<h3 id=\"inlineblock\">Inline-block?</h3>\n<p>It exists and is very useful. There are a few <a href=\"http://stackoverflow.com/a/21614997/6412365\">inline-block elements</a>.</p>\n<p>These elments will fall adjacent to their siblings (left, right) like inline elements, but can have their height and widths adjusted like block elements.</p>\n<p>Example:</p>\n<p>Here we have the same image resized. Notice how they stay on the same line.</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/wwcode-webdev/ib-sized.png\" alt=\"different sized dog images\" /></p>\n<h3 id=\"customizingthedisplayproperty\">Customizing the display property</h3>\n<p><code>block</code>, <code>inline</code>, and <code>inline-block</code> are all values of the <code>display</code> CSS attribute. As seen above, elements come with a default display value, but this can, <em>and often is</em> overwritten with CSS.</p>\n<p>For example, if I gave all of the dog images above a class of <code>dog-img</code>, then set all instances of <code>dog-img</code> to be <code>display: block;</code> instead of inline-block.</p>\n<pre><code class=\"html language-html\">  &lt;img src=\"dog.jpg\" alt=\"brown dog\" class='dog-img'&gt;\n  &lt;img src=\"dog.jpg\" alt=\"brown dog\" class='dog-img'&gt;\n  &lt;img src=\"dog.jpg\" alt=\"brown dog\" class='dog-img'&gt;\n</code></pre>\n<pre><code class=\"css language-css\">  .dog-img {\n    display: block;\n  }\n</code></pre>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/wwcode-webdev/block-docs.png\" alt=\"block-level dog images\" /></p>\n<p>Notice that they remain on their own lines.</p>\n<hr>\n<p>Keep this normal flow in mind as we move onto positioning. When we manually position something, we are <em>removing it from this default flow</em>.</p>\n<p class=\"closing\">Let's move onto positioning.</p>",
    "sectionType": "chapter",
    "sequence": 2,
    "parentSection": {
      "parentSectionType": "module",
      "parentSectionSequence": 3,
      "parentSectionSlug": "intermediate-html"
    }
  },
  {
    "title": "Basic Positioning",
    "slug": "basic-positioning",
    "content": "<h2 id=\"thepositionproperty\">The <code>position</code> Property</h2>\n<p>Position is a CSS property just like <code>color</code> or <code>background</code>, etc. It can be given one of 5 values: <code>static</code>, <code>relative</code>, <code>absolute</code>, <code>fixed</code>, or <code>inherit</code>. You will probably never use <code>position: inherit;</code>. Elements default to <code>position: static;</code>, meaning <em>most likely</em> you will not have to specify it.</p>\n<h3 id=\"static\">Static</h3>\n<p>Elements will be left according to the Document Flow covered in the last lesson. Nothing more to see here.</p>\n<h3 id=\"relative\">Relative</h3>\n<p>Relatively positioned elements behave like statically positioned ones, <em>except</em> (!!!) They can take 4 additional CSS properties: <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>.</p>\n<p>These properties take a distance value (px, em, in), and dictate where the element should be <em>relative</em> to where it would normally fall.</p>\n<p>Here are some pups:</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/wwcode-webdev/dog-row.png\" alt=\"three dog images\" /></p>\n<p>Here, I have moved the second image to the left with the following CSS:</p>\n<pre><code>.img-2 {\n  position: relative;\n  left: 100px;\n}\n</code></pre>\n<p>Note: While the content obviously shifts, a relatively positioned element still takes up it's normal space in the document flow (i.e. the third image did not offset when the second one moved.)</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/wwcode-webdev/dog-offset.png\" alt=\"three dogs, left image offset\" /></p>\n<h3 id=\"absolute\">Absolute</h3>\n<p>These elements take the same <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code> CSS properties, but the values are now relative to the top left corner of the its nearest relatively positioned parent (usually a <code>div</code> or an element similar).</p>\n<p>Note: Absolute position elements <strong>ARE</strong> removed from norsmal document flow, and other element will fill the space the absolute element would have taken up.</p>\n<p>Here, I have moved the second image 200px down and 200px right from the top left corner of the document. Notice that <code>top</code> and <code>left</code> refer to the left-most and top-most edges of the element:</p>\n<pre><code>.img-2 {\n  position: absolute;\n  left: 100px;\n  top: 100px;\n}\n</code></pre>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/wwcode-webdev/fixed-dogs.png\" alt=\"dog images in triangle shape\" /></p>\n<h3 id=\"fixed\">Fixed</h3>\n<p>Elements with fixed position remain at a certain place in the <em>window</em> no matter where a user scrolls in the browser.</p>\n<p>Like absolute elements, these elements are removed from the normal flow. The <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code> CSS properties are relative to the top left corner of the <em>viewable window</em>.</p>\n<pre><code>.img-2 {\n  position: fixed;\n  left: 100px;\n  top: 100px;\n}\n</code></pre>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/wwcode-webdev/fixed-dogs.png\" alt=\"dog images in triangle shape\" /></p>\n<p>If you'd like more on position, check out <a href=\"http://learnlayout.com/position.html\">this tutorial</a>. When you have time, I recommend going through the full, learn layout tutorial as well.</p>\n<p class=\"closing\">For now, onto Flexbox!</p>",
    "sectionType": "chapter",
    "sequence": 3,
    "parentSection": {
      "parentSectionType": "module",
      "parentSectionSequence": 3,
      "parentSectionSlug": "intermediate-html"
    }
  },
  {
    "title": "Flexbox",
    "slug": "flexbox",
    "content": "<h2 id=\"flexbox\">Flexbox</h2>\n<p>Flexbox is a relatively new feature of CSS3. It is used to create a \"flexible box\" that maintains positional integrity no matter what size screen it is on. As you will undoubtedly be developing sites that will appear on large desktop screens as well as 4-inch, mobile phones, it essential to be able to make sites that can stand the test of both.</p>\n<p>There are a lot of possibilities with flexbox. Here, I will cover the essentials.</p>\n<h3 id=\"start\">Start</h3>\n<ol>\n<li><p>You will need a wrapper container (the flexible box). This will be a <code>div</code> like element.</p>\n<pre><code>&lt;div class=\"flex-parent\"&gt;\n\n&lt;/div&gt;\n</code></pre></li>\n<li><p>Give this wrapper container the CSS property of <code>display: flex;</code></p>\n<pre><code>.flex-parent {\n  display: flex;\n}\n</code></pre></li>\n</ol>\n<p>Now that the parent is a flexible box, the children of the parent can now be aligned easily, <em>and will keep logical alignment on screens of different sizes</em>.</p>\n<p>Here is our base setup:</p>\n<pre><code>&lt;div class=\"flex-parent\"&gt;\n  &lt;img src=\"dog.jpg\" alt=\"beagle puppy\" class=\"dog-img\"&gt;\n  &lt;img src=\"dog.jpg\" alt=\"beagle puppy\" class=\"dog-img\"&gt;\n  &lt;img src=\"dog.jpg\" alt=\"beagle puppy\" class=\"dog-img\"&gt;\n&lt;/div&gt;\n</code></pre>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/wwcode-webdev/flex-orig.png\" alt=\"three dogs in a flexbox\" /></p>\n<p>The outer box with the border is our flex container. It has <code>display: flex;</code>. Now we will add more properties to that parent box.</p>\n<h3 id=\"alignitems\"><code>align-items</code></h3>\n<p>This will align items before, on, or after the parent's main axis. By default, a flex-displayed element's main axis runs horizontally (like a row or a hamburger).</p>\n<p>The values can be <code>flex-start</code> (at the top), <code>flex-end</code>, (at the bottom), or <code>center</code> (in the middle), plus more. Vertically centering items has been a nightmare for CSS-ers for decades. Flexbox makes it dead-simple.</p>\n<pre><code>.flex-parent {\n  display: flex;\n  align-items: center;\n}\n</code></pre>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/wwcode-webdev/flex-align-center.png\" alt=\"three dog images aligned center\" /></p>\n<h3 id=\"justifycontent\"><code>justify-content</code></h3>\n<p>This will align content before, on, or after the <em>secondary</em> axis of a flexible box. By default, is the vertical axis (like a column). In other word, by default this aligns elements to the left, middle, or right.</p>\n<p>The values can be <code>flex-start</code> (left), <code>flex-end</code> (right), <code>center</code> (middle), plus more.</p>\n<pre><code>.flex-parent {\n  display: flex;\n  justify-content: center;\n}\n</code></pre>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/wwcode-webdev/flex-justify-center.png\" alt=\"three dog images aligned center\" /></p>\n<h3 id=\"alltogether\">All together</h3>\n<pre><code>.flex-parent {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n</code></pre>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/wwcode-webdev/flex-center-center.png\" alt=\"three dog images aligned center\" /></p>\n<hr>\n<p>Flexbox offers <em>so so</em> much more, but centering items is really all you will need to begin.</p>\n<p>When you are ready, I highly recommend this <a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">flexbox guide</a> although there are many, many more to choose from.</p>\n<p class=\"closing\">That's it for CSS. It's Git time!</p>",
    "sectionType": "chapter",
    "sequence": 4,
    "parentSection": {
      "parentSectionType": "module",
      "parentSectionSequence": 3,
      "parentSectionSlug": "intermediate-html"
    }
  },
  {
    "title": "Git Branching",
    "slug": "git-branching",
    "content": "<h2 id=\"gotbranching\">Got Branching?</h2>\n<p>When this course originally introduced Git, it was mentioned as a version control manager. While the basics we covered does a good job of taking snapshots in time and saving them when we want…</p>\n<p><strong>There is only ever one saved version of our program.</strong></p>\n<p>One of the primary purposes of Git is to allow you to make a <em>full copy</em> of your saved directory and be able to make changes in that copy without changing the original <em>at all</em>. And you can do this all within one Git repository.</p>\n<p><img src=\"https://media.giphy.com/media/ujUdrdpX7Ok5W/giphy.gif\" alt=\"shia lebeouf magic\" /></p>\n<h3 id=\"gitbranches\">Git Branches</h3>\n<p>A Git branch is a fully separate directory system existing withing a repository. ALL Git repositories initialize with a \"master\" branch. Therefore all files and folders you intially add and commit are added and committed on the master branch.</p>\n<p>If you were to then run</p>\n<p><code>$ git checkout -b awesome_branch</code></p>\n<p>you will simultaneously create and <em>move onto</em> a new branch named \"awesome_branch\". This new branch initializes with ALL of the files and folders from <code>master</code> branch.</p>\n<p>Here's the kicker: If we make changes while on <code>awesome_branch</code>, our <code>master</code> branch does not change at all. We can add, commit, delete, the whole nine yards, and the file system on <code>awesome_branch</code> does not affect <code>master</code>. Cool stuff.</p>\n<p><strong>Note</strong>: You will usually have one branch that is your main branch. This is usually <code>master</code>. You will branch from <code>master</code> to make new changes, then merge those changes back into master. Rinse and repeat until you are done with your project.</p>\n<p>You will run all commands within your terminal. Let's learn some commands.</p>\n<h3 id=\"dgitcheckoutbranch_name\"><code>$ git checkout [branch_name]</code></h3>\n<p>Use <code>$ git checkout...</code> to switch between branches</p>\n<h3 id=\"dgitcheckoutbbranch_name\"><code>$ git checkout -b [branch_name]</code></h3>\n<p>Use the <code>-b</code> flag create a <em>new</em> branch, then switch to that branch</p>\n<hr>\n<h2 id=\"merging\">Merging</h2>\n<p>Great. You've moved onto the new branch and made some changes that you like and you would like to incorporate those into the main, <code>master</code> branch.</p>\n<p>There are a couple of way to accomplish this. I will cover \"merging\".</p>\n<h3 id=\"dgitmergeother_branch\"><code>$ git merge [other_branch]</code></h3>\n<p>Use git merge to bring changes from another branch to the branch you are currently on. Git programmatically looks for changes and adds them in the right spot to the branch you are on. The process:</p>\n<ol>\n<li><p>Create a new branch to make changes:</p>\n<ul>\n<li><code>$ git checkout -b awesome_branch</code></li></ul></li>\n<li><p>Make changes</p></li>\n<li><p>Move <em>back</em> to master so you can merge in the new changes</p>\n<ul>\n<li><code>$ git checkout master</code></li></ul></li>\n<li><p>Merge in the changes from awesome_branch</p>\n<ul>\n<li><code>$ git merge awesome_branch</code></li>\n<li>Now master branch has all of the changes from awesome_branch</li></ul></li>\n<li><p>Create another branch to make newer changes:</p>\n<ul>\n<li><code>$ git checkout -b even_better_branch</code></li></ul></li>\n<li><p>…</p></li>\n</ol>\n<hr>\n<p>You can have as many branches as you like. You can even push specific branches to remote repositories like Github.</p>\n<p><code>$ git push origin awesome_branch</code></p>\n<p>Where <code>origin</code> is the remote repository and <code>awesome_branch</code> is the local branch.</p>\n<p>Great, now you can branch!</p>\n<p class=\"closing\">Let's learn how this works in a team.</p>",
    "sectionType": "chapter",
    "sequence": 5,
    "parentSection": {
      "parentSectionType": "module",
      "parentSectionSequence": 3,
      "parentSectionSlug": "intermediate-html"
    }
  },
  {
    "title": "Team Git",
    "slug": "team-git",
    "content": "<h2 id=\"teamgitworkflow\">Team Git Workflow</h2>\n<p>A major bonus with Git is that two or more people can make changes to the same repository and then merge those changes together with almost the exact same method used above.</p>\n<p>When working in a team, all members will have the same remote repository.</p>\n<ol>\n<li><p>Use <code>$ git clone [repository url]</code> to ensure eveyone has a local copy of that repo. Now everyone has the <em>exact same</em> master branch.</p></li>\n<li><p>Everyone creates separate branches and makes their own changes.</p></li>\n<li><p>Before you merge the new changes into master, switch to master branch and <code>git pull</code> the most recent <em>TEAM</em> version of master branch.</p>\n<ul>\n<li>Doubtlessly there will be changes. If you do not do this, there is a chance you will accidentally overwrite work of another team member.</li>\n<li>(while on master branch) <code>$ git pull origin master</code></li></ul></li>\n<li><p>Git merge as usual.</p>\n<ul>\n<li><code>$ git merge awesome_branch</code></li></ul></li>\n<li><p>There may be \"merge conflicts\" at this point. They are a bit beyond the scope of this course.</p>\n<ul>\n<li>In short, go to the files where the conflicts arise and fix the conflicting code.</li></ul></li>\n<li><p>Push up to the remote the new and improved master branch</p>\n<ul>\n<li><code>$ git push origin master</code></li></ul></li>\n<li><p>…</p></li>\n</ol>\n<hr>\n<p>There are many team git workflows around. Here's <a href=\"http://stackoverflow.com/a/2429011/6412365\">another one</a>.</p>\n<p class=\"closing\">That wraps up this course. See you next time!</p>",
    "sectionType": "chapter",
    "sequence": 6,
    "parentSection": {
      "parentSectionType": "module",
      "parentSectionSequence": 3,
      "parentSectionSlug": "intermediate-html"
    }
  }
]
